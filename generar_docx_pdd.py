# -*- coding: utf-8 -*-
import json
import os
import sys
import cv2 # Necesario para leer dimensiones de imagen
from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.enum.table import WD_ROW_HEIGHT_RULE, WD_CELL_VERTICAL_ALIGNMENT
from datetime import datetime # Para fecha de generación

# --- Configuración ---
# Asegúrate que coincidan con main.py y los outputs de fases anteriores
JSON_INPUT_PATH = 'full_analysis_output.json'
SCREENSHOT_DIR = 'screenshots_output'
OUTPUT_DOCX_PATH = 'PDD_Generated_Output_v0.3.docx' # Nombre para v0.3
OUTPUT_BPMN_PATH = 'Generated_Process.bpmn'
DEFAULT_USER_METADATA = { # Valores por defecto si no se pasan desde main.py
    "project_name": "PDD Agent Process", "project_acronym": "PDDAGENT",
    "author_name": "AutoGenerated", "version": "0.3", "status": "BORRADOR" # Status en Español
}
# --- Fin Configuración ---

# --- Constantes ---
# Notas y placeholders en español
AI_NOTE_TEXT = "(Nota: El siguiente texto fue generado por IA basado en el análisis del video y puede requerir revisión y edición.)"
AI_NOTE_TEXT_SPECULATIVE = "(Nota: El siguiente texto es una sugerencia altamente especulativa generada por IA basada en el análisis del video y requiere revisión humana significativa, validación y potencialmente reescritura completa.)"
PLACEHOLDER_STYLE_COLOR = RGBColor(128, 128, 128) # Gris para placeholders

# --- Funciones Auxiliares ---
# (Sin cambios funcionales)
def set_run_font(run, size_pt=11, bold=False, italic=False, color=None):
    """Aplica formato básico a un Run."""
    font = run.font
    font.size = Pt(size_pt)
    font.bold = bold
    font.italic = italic
    if color:
        font.color.rgb = color

def add_ai_note(paragraph, speculative=False):
    """Añade la nota estándar de texto generado por IA en español."""
    note_text = AI_NOTE_TEXT_SPECULATIVE if speculative else AI_NOTE_TEXT
    run_note = paragraph.add_run(note_text)
    set_run_font(run_note, 9, italic=True)
    paragraph.add_run("\n")

def add_placeholder(paragraph, text):
    """Añade texto de placeholder con estilo distintivo."""
    run_placeholder = paragraph.add_run(f"[{text}]") # Placeholder text should be in Spanish now
    set_run_font(run_placeholder, 11, italic=True, color=PLACEHOLDER_STYLE_COLOR)

def add_heading_with_level(document, text, level):
    """Añade un encabezado con el nivel correcto (0-9)."""
    if 0 <= level <= 9:
        document.add_heading(text, level=level)
    else:
        p = document.add_paragraph()
        run = p.add_run(text)
        run.bold = True
        print(f"Advertencia: Nivel de encabezado inválido ({level}) para '{text}'. Usando párrafo en negrita.")

def add_ai_generated_section(document, title, level, json_data, json_key, speculative=False):
    """Añade una sección con texto generado por IA (si existe) y la nota."""
    print(f"  - Añadiendo sección '{title}'...")
    add_heading_with_level(document, title, level) # Title can be mixed language
    text_from_ai = json_data.get(json_key)
    p = document.add_paragraph()
    add_ai_note(p, speculative)
    if text_from_ai:
        p.add_run(text_from_ai) # El texto ya viene en español del JSON
    else:
        add_placeholder(p, f"La IA no generó texto para '{json_key}' o faltaba en el JSON.")
    document.add_paragraph()

def add_manual_placeholder_section(document, title, level, placeholder_text):
    """Añade una sección que debe ser completada manualmente."""
    print(f"  - Añadiendo placeholder para sección '{title}'...")
    add_heading_with_level(document, title, level) # Title can be mixed language
    p = document.add_paragraph()
    add_placeholder(p, placeholder_text) # Placeholder text should be in Spanish
    document.add_paragraph()

# --- Funciones Principales de Sección ---
# (Sin cambios en add_title_page, add_toc_placeholder, handle_bpmn_section, add_detailed_steps_table, add_exceptions_suggestions)
def add_title_page(document, user_metadata, ai_metadata):
    """Añade la página de título y metadatos iniciales."""
    print("  - Añadiendo página de título...")
    process_name = ai_metadata.get('process_name_suggestion') or user_metadata.get('project_name', 'Proceso Desconocido')
    acronym = ai_metadata.get('potential_acronym') or user_metadata.get('project_acronym', '')
    acronym_str = f"({acronym})" if acronym else ""

    # Título principal en inglés
    document.add_heading("Process Description Document (PDD)", level=0)
    p_name = document.add_paragraph()
    run_name = p_name.add_run(f"{process_name} {acronym_str}") # Process name comes from AI (Spanish)
    run_name.bold = True
    run_name.font.size = Pt(16)
    p_name.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    p_ver = document.add_paragraph()
    p_ver.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    # Usar estado en español
    run_ver = p_ver.add_run(f"Version {user_metadata.get('version', '<x.x>')} - {user_metadata.get('status', 'BORRADOR')}")
    run_ver.italic = True

    document.add_paragraph(f"Preparado por: {user_metadata.get('author_name', '<Nombre Autor>')}")
    document.add_paragraph(f"Fecha: {datetime.now().strftime('%Y-%m-%d')}")

    p_app = document.add_paragraph()
    add_placeholder(p_app, "Tabla o lista de Aprobadores: Nombre, Rol, Fecha Firma")
    document.add_page_break()

def add_toc_placeholder(document):
    """Añade el placeholder para la Tabla de Contenidos."""
    print("  - Añadiendo placeholder para Tabla de Contenidos...")
    # Título en inglés
    add_heading_with_level(document, "Table of Contents", level=1)
    p = document.add_paragraph()
    # Instrucción en español
    add_placeholder(p, "Insertar Tabla de Contenidos aquí (Ej: En MS Word: Referencias -> Tabla de Contenidos -> Tabla Automática)")
    document.add_page_break()

def handle_bpmn_section(document, bpmn_xml_string, output_bpmn_path):
    """Guarda el archivo BPMN y añade instrucciones/placeholder en el DOCX."""
    print("  - Manejando sección BPMN...")
    # Título mixto
    add_heading_with_level(document, "3.2 Process Flow Diagram As-Is (BPMN 2.0)", level=2)
    if bpmn_xml_string:
        try:
            with open(output_bpmn_path, 'w', encoding='utf-8') as f_bpmn:
                f_bpmn.write(bpmn_xml_string)
            print(f"    -> Archivo BPMN XML guardado en: '{output_bpmn_path}'")
            p = document.add_paragraph()
            # Instrucciones en español
            p.add_run("Instrucciones:").bold = True
            p.add_run(f"\n1. Importar el archivo generado ")
            run_fname = p.add_run(f"'{os.path.basename(output_bpmn_path)}'")
            run_fname.italic = True
            p.add_run(" en una herramienta de modelado BPMN (ej: bpmn.io online, draw.io, Camunda Modeler).")
            p.add_run("\n2. Revisar y editar significativamente el diagrama para reflejar con precisión el flujo del proceso actual (As-Is), incluyendo decisiones, caminos paralelos, etc.")
            p.add_run("\n3. Exportar el diagrama final como imagen (PNG recomendado).")
            p.add_run("\n4. Eliminar este texto de instrucciones y pegar la imagen exportada a continuación.")
            p_paste = document.add_paragraph("\n")
            add_placeholder(p_paste, "<< PEGUE AQUÍ LA IMAGEN DEL DIAGRAMA BPMN AS-IS >>")
            p_paste.add_run("\n")
        except Exception as e:
            print(f"    Error al guardar BPMN XML en '{output_bpmn_path}': {e}")
            p_err = document.add_paragraph()
            add_placeholder(p_err, f"Error al guardar el archivo BPMN XML: {e}. Revise la salida de la IA o los permisos.")
    else:
        print("    Advertencia: No se encontró código BPMN XML en el JSON.")
        p_warn = document.add_paragraph()
        add_placeholder(p_warn, "No se encontró código BPMN XML en la salida del análisis de IA.")
    document.add_paragraph()

def add_detailed_steps_table(document, steps_list, screenshot_dir):
    """Añade la tabla de pasos detallados con screenshots (CORREGIDO)."""
    print("  - Añadiendo tabla de pasos detallados...")
    # Título mixto
    add_heading_with_level(document, "3.3 Detailed Process Steps As-Is", level=2)
    if not steps_list:
        p = document.add_paragraph()
        add_placeholder(p, "No se encontraron pasos detallados en la salida del análisis de IA.")
        return 0

    p_note = document.add_paragraph()
    # Nota en español
    run_note = p_note.add_run("(Nota: Los siguientes pasos fueron extraídos por IA y pueden requerir revisión y edición para precisión y completitud. Los screenshots corresponden a fotogramas identificados por el script de extracción.)")
    set_run_font(run_note, 9, italic=True)

    # Encabezados de tabla en inglés
    headers = ["Step ID", "Application", "Action", "Detailed Description", "Screenshot"]
    try:
        table = document.add_table(rows=1, cols=len(headers))
        table.style = 'Table Grid'
        table.autofit = False
        table.allow_autofit = True

        # Rellenar Encabezados
        hdr_cells = table.rows[0].cells
        table.rows[0].height_rule = WD_ROW_HEIGHT_RULE.AUTO
        table.rows[0].height = None
        for i, header_text in enumerate(headers):
            cell_paragraph = hdr_cells[i].paragraphs[0]
            cell_paragraph.clear()
            run = cell_paragraph.add_run(header_text)
            set_run_font(run, 10, bold=True)
            cell_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            hdr_cells[i].vertical_alignment = WD_CELL_VERTICAL_ALIGNMENT.CENTER

        screenshots_found_count = 0
        target_width_inches = Inches(2.5)

        # Rellenar Filas con Pasos
        for step in steps_list:
            step_number = step.get("step_number", "N/A")
            application = step.get("application_in_focus", "N/A")
            action_summary = step.get("description", "N/A") # Ya viene en español del JSON
            description_long = step.get("action_type_inferred", "N/A") # Ya viene en español del JSON

            new_row = table.add_row()
            new_row.height_rule = WD_ROW_HEIGHT_RULE.AUTO
            new_row.height = None
            row_cells = new_row.cells

            # Añadir texto a cada celda directamente
            p0 = row_cells[0].paragraphs[0]; p0.clear(); run0 = p0.add_run(str(step_number)); set_run_font(run0, 10); p0.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT; row_cells[0].vertical_alignment = WD_CELL_VERTICAL_ALIGNMENT.TOP
            p1 = row_cells[1].paragraphs[0]; p1.clear(); run1 = p1.add_run(application); set_run_font(run1, 10); p1.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT; row_cells[1].vertical_alignment = WD_CELL_VERTICAL_ALIGNMENT.TOP
            p2 = row_cells[2].paragraphs[0]; p2.clear(); run2 = p2.add_run(action_summary); set_run_font(run2, 10); p2.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT; row_cells[2].vertical_alignment = WD_CELL_VERTICAL_ALIGNMENT.TOP
            p3 = row_cells[3].paragraphs[0]; p3.clear(); run3 = p3.add_run(description_long); set_run_font(run3, 10); p3.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT; row_cells[3].vertical_alignment = WD_CELL_VERTICAL_ALIGNMENT.TOP

            # Incrustar Screenshot
            screenshot_filename = f"screenshot_paso_{step_number}.png"
            screenshot_path = os.path.join(screenshot_dir, screenshot_filename)
            cell_paragraph_img = row_cells[4].paragraphs[0]
            cell_paragraph_img.clear()
            cell_paragraph_img.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            row_cells[4].vertical_alignment = WD_CELL_VERTICAL_ALIGNMENT.CENTER

            if os.path.exists(screenshot_path):
                try:
                    img = cv2.imread(screenshot_path)
                    if img is None: raise ValueError("OpenCV no pudo leer la imagen.")
                    height_px, width_px, _ = img.shape
                    aspect_ratio = float(height_px) / float(width_px) if width_px > 0 else 1
                    target_height_inches = target_width_inches * aspect_ratio
                    run_img = cell_paragraph_img.add_run()
                    run_img.add_picture(screenshot_path, width=target_width_inches, height=target_height_inches)
                    screenshots_found_count += 1
                except Exception as e:
                    print(f"    Advertencia: No se pudo leer/insertar imagen '{screenshot_path}': {e}")
                    add_placeholder(cell_paragraph_img, "[Error al leer/insertar imagen]")
            else:
                add_placeholder(cell_paragraph_img, "[Screenshot no encontrado]")

        print(f"    -> Tabla creada con {len(steps_list)} pasos.")
        print(f"    -> Se encontraron e intentaron insertar {screenshots_found_count} screenshots.")
        document.add_paragraph()
        return screenshots_found_count

    except Exception as e:
        print(f"  Error Crítico al crear la tabla de pasos: {e}")
        import traceback
        traceback.print_exc()
        p_err = document.add_paragraph()
        add_placeholder(p_err, f"[Error crítico al generar tabla de pasos detallados: {e}]")
        return 0

def add_exceptions_suggestions(document, exceptions_list):
    """Añade las sugerencias de excepciones de la IA."""
    print("  - Añadiendo sugerencias de excepciones IA...")
    business_exceptions = [e for e in exceptions_list if e.get("exception_type") == "Negocio"]
    app_exceptions = [e for e in exceptions_list if e.get("exception_type") == "Aplicación"]

    # Sección 5.1 (Título mixto)
    add_heading_with_level(document, "5.1 Excepciones de Negocio (Business Exceptions)", level=2)
    p51 = document.add_paragraph()
    # Placeholder en español (SIN referencia a guía)
    add_placeholder(p51, "Tabla o lista detallando las desviaciones conocidas del flujo estándar basadas en condiciones de negocio. Para cada una: ID, Descripción, Disparador (Trigger), Pasos de Manejo Requeridos (por robot o humano).")
    if business_exceptions:
        p51_ai = document.add_paragraph()
        add_ai_note(p51_ai, speculative=True)
        # Título sugerencias en español
        p51_ai.add_run("Sugerencias IA (Revisar y Detallar):\n").bold = True
        for ex in business_exceptions:
            # Usar texto en español del JSON
            p51_ai.add_run(f"- Desc: {ex.get('description', 'N/A')}\n  Trigger: {ex.get('potential_trigger', 'N/A')}\n  Idea Manejo: {ex.get('suggested_handling_idea', 'N/A')}\n")
    document.add_paragraph()

    # Sección 5.2 (Título mixto)
    add_heading_with_level(document, "5.2 Errores de Aplicación/Sistema (Application/System Errors)", level=2)
    p52 = document.add_paragraph()
    # Placeholder en español (SIN referencia a guía)
    add_placeholder(p52, "Tabla o lista detallando cómo el robot debe manejar errores técnicos. Para cada uno: ID, Descripción, Disparador, Lógica de Manejo (ej: reintentos, log, notificación, detener).")
    if app_exceptions:
         p52_ai = document.add_paragraph()
         add_ai_note(p52_ai, speculative=True)
         # Título sugerencias en español
         p52_ai.add_run("Sugerencias IA (Revisar y Detallar):\n").bold = True
         for ex in app_exceptions:
             # Usar texto en español del JSON
             p52_ai.add_run(f"- Desc: {ex.get('description', 'N/A')}\n  Trigger: {ex.get('potential_trigger', 'N/A')}\n  Idea Manejo: {ex.get('suggested_handling_idea', 'N/A')}\n")
    document.add_paragraph()


# --- Función Principal de Generación ---
def generate_pdd_docx_v0_3(json_path: str, screenshot_dir: str, output_docx_path: str, output_bpmn_path: str, user_metadata: dict):
    """
    Genera el documento DOCX completo para v0.3 usando la estructura acordada,
    leyendo el JSON complejo y los screenshots. (Contenido ES, Títulos EN/Mixto)
    """
    print(f"--- Iniciando Fase 3.3: Generación de Documento DOCX v0.3 ---")
    print(f"Leyendo JSON desde: {json_path}")
    print(f"Buscando screenshots en: {screenshot_dir}")
    print(f"Guardando DOCX en: {output_docx_path}")
    print(f"Guardando BPMN en: {output_bpmn_path}")

    # Cargar Datos del JSON
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            json_data = json.load(f)
        print("Datos JSON cargados exitosamente.")
    except FileNotFoundError:
        print(f"Error Crítico: No se pudo encontrar el archivo JSON '{json_path}'.")
        return False
    except json.JSONDecodeError as e:
        print(f"Error Crítico: El archivo JSON '{json_path}' no es válido: {e}")
        return False
    except Exception as e:
        print(f"Error Crítico inesperado al cargar JSON: {e}")
        return False

    # Verificar Directorio de Screenshots
    if not os.path.isdir(screenshot_dir):
        print(f"Advertencia: No se encontró el directorio de screenshots '{screenshot_dir}'. La tabla de pasos no tendrá imágenes.")

    # Crear Documento DOCX
    try:
        document = Document()
        print("\n[Paso 1/3] Añadiendo secciones al documento...")

        # Página de Título y TOC
        add_title_page(document, user_metadata, json_data.get("pdd_metadata_inferred", {}))
        add_toc_placeholder(document)

        # --- Sección 1: Introducción ---
        add_heading_with_level(document, "1.0 Introduction", level=1) # Título EN
        add_ai_generated_section(document, "1.1 Propósito del Documento", 2, json_data, "section_1_1_purpose_text") # Título ES
        add_ai_generated_section(document, "1.2 Objetivos de la Automatización", 2, json_data, "section_1_2_objectives_text", speculative=True) # Título ES
        add_heading_with_level(document, "1.3 Alcance de la Automatización (Scope)", level=2) # Título Mixto
        add_ai_generated_section(document, "1.3.1 Dentro del Alcance (In Scope)", 3, json_data, "section_1_3_1_scope_in_suggestion", speculative=True) # Título Mixto
        add_ai_generated_section(document, "1.3.2 Fuera del Alcance (Out of Scope)", 3, json_data, "section_1_3_2_scope_out_suggestion", speculative=True) # Título Mixto
        # Placeholder sin referencia a guía
        add_manual_placeholder_section(document, "1.4 Contactos Clave / Interesados (Stakeholders)", 2, "Tabla o lista con Nombre, Rol (SME, Propietario Proceso, BA, etc.), Información de Contacto.") # Título Mixto
        # Placeholder sin referencia a guía
        add_manual_placeholder_section(document, "1.5 Prerrequisitos Mínimos para la Automatización", 2, "Listar elementos necesarios ANTES de iniciar el desarrollo (ej: PDD aprobado, datos prueba, accesos, entorno listo).") # Título ES

        # --- Sección 2: Contexto del Negocio ---
        # CORRECCIÓN: Llamar solo a add_ai_generated_section que ya incluye el título
        add_ai_generated_section(document, "2.0 Business Context", 1, json_data, "section_2_0_context_text") # Título EN

        # --- Sección 3: Descripción del Proceso As-Is ---
        add_heading_with_level(document, "3.0 Process Description As-Is", level=1) # Título EN/Mixto
        add_ai_generated_section(document, "3.1 Overview of the As-Is Process", 2, json_data, "section_3_1_as_is_summary_text") # Título EN/Mixto
        # Añadir roles inferidos
        roles_list = json_data.get("section_3_1_user_roles_inferred", [])
        p_roles = document.add_paragraph()
        add_ai_note(p_roles)
        p_roles.add_run("Roles de Usuario Implicados (Inferidos por IA):\n").bold = True
        if roles_list:
            for role in roles_list:
                p_roles.add_run(f"- {role}\n") # Roles ya vienen en español del JSON
        else:
            add_placeholder(p_roles, "No se infirieron roles de usuario.")
        document.add_paragraph()

        handle_bpmn_section(document, json_data.get("section_3_2_bpmn_xml_code"), output_bpmn_path) # Título interno mixto
        add_detailed_steps_table(document, json_data.get("section_3_3_detailed_steps", []), screenshot_dir) # Título interno mixto
        add_ai_generated_section(document, "3.4 Datos de Entrada (Inputs)", 2, json_data, "section_3_4_inputs_suggestion", speculative=True) # Título Mixto
        add_ai_generated_section(document, "3.5 Datos de Salida (Outputs)", 2, json_data, "section_3_5_outputs_suggestion", speculative=True) # Título Mixto
        add_ai_generated_section(document, "3.6 Reglas de Negocio (Business Rules)", 2, json_data, "section_3_6_rules_suggestion", speculative=True) # Título Mixto

        # --- Sección 4: Descripción del Proceso To-Be ---
        add_heading_with_level(document, "4.0 Process Description To-Be", level=1) # Título EN/Mixto
        add_ai_generated_section(document, "4.1 Overview of the To-Be Process", 2, json_data, "section_4_1_tobe_summary_suggestion", speculative=True) # Título EN/Mixto
        # Placeholder sin referencia a guía
        add_manual_placeholder_section(document, "4.2 Process Flow Diagram To-Be", 2, "Crear (manualmente) un diagrama de flujo futuro (To-Be) (BPMN o simple) diferenciando pasos de robot y manuales. Pegar la imagen aquí.") # Título EN/Mixto
        p_paste_tobe = document.paragraphs[-1]
        p_paste_tobe.insert_paragraph_before("\n")
        add_placeholder(p_paste_tobe.insert_paragraph_before(""), "<< PEGUE AQUÍ LA IMAGEN DEL DIAGRAMA TO-BE >>")
        p_paste_tobe.insert_paragraph_before("\n")
        add_ai_generated_section(document, "4.3 Interacción Humano-Robot", 2, json_data, "section_4_3_interaction_suggestion", speculative=True) # Título ES

        # --- Sección 5: Manejo de Excepciones y Errores ---
        add_heading_with_level(document, "5.0 Exception and Error Handling", level=1) # Título EN
        add_exceptions_suggestions(document, json_data.get("section_5_exceptions_suggestions", [])) # Títulos internos mixtos
        # Placeholder sin referencia a guía
        add_manual_placeholder_section(document, "5.3 Manejo de Errores/Excepciones Desconocidas", 2, "Definir el procedimiento estándar cuando ocurre un error o excepción no contemplado (ej: tomar screenshot, guardar estado, notificar a soporte, detener proceso).") # Título ES

        # --- Sección 6: Información Contextual Adicional ---
        add_heading_with_level(document, "6.0 Additional Contextual Information", level=1) # Título EN
        # Placeholder sin referencia a guía y texto de aplicaciones detectadas en español
        add_manual_placeholder_section(document, "6.1 Applications Used", 2, "Tabla listando TODAS las aplicaciones involucradas (Nombre, Tipo, Versión, Entorno, Acceso).\nAplicaciones Detectadas por IA (Verificar y Completar):\n" + "\n".join([f"- {app}" for app in sorted(list(set(step.get("application_in_focus", "N/A") for step in json_data.get("section_3_3_detailed_steps", []) if step.get("application_in_focus") != "N/A")))] or ["- Ninguna detectada"])) # Título EN
        add_ai_generated_section(document, "6.2 Dependencies", 2, json_data, "section_6_2_dependencies_suggestion", speculative=True) # Título EN
        # Placeholder sin referencia a guía
        add_manual_placeholder_section(document, "6.3 As-Is Process Statistics/Metrics", 2, "Incluir datos cuantitativos clave del proceso manual (Volumen, AHT, Tasa Error, FTEs, Costo, etc.). Obtener estos datos del negocio.") # Título EN/Mixto
        add_ai_generated_section(document, "6.4 Reporting and Logging Requirements", 2, json_data, "section_6_4_reporting_suggestion", speculative=True) # Título EN

        # --- Sección 7: Apéndice ---
        add_heading_with_level(document, "7.0 Appendix", level=1) # Título EN
        add_manual_placeholder_section(document, "7.1 Glossary of Terms", 2, "Definir acrónimos y términos técnicos o de negocio específicos utilizados.") # Título EN
        add_manual_placeholder_section(document, "7.2 Document Revision History", 2, "Tabla con Versión, Fecha, Autor, Descripción de Cambios, Aprobador.") # Título EN
        add_manual_placeholder_section(document, "7.3 Other Reference Documents", 2, "Listar cualquier otro documento relevante (SOPs existentes, guías de usuario, etc.).") # Título EN

        print("\n[Paso 2/3] Estructura DOCX completada.")

        # Guardar Documento DOCX
        print(f"[Paso 3/3] Guardando documento DOCX final en '{output_docx_path}'...")
        document.save(output_docx_path)
        print("¡Documento DOCX guardado exitosamente!")
        return True

    except Exception as e:
        print(f"Error Crítico inesperado durante la generación del DOCX: {e}")
        import traceback
        traceback.print_exc()
        return False

# --- Bloque de Ejecución Principal (para pruebas standalone) ---
if __name__ == "__main__":
    user_meta = DEFAULT_USER_METADATA
    print("Ejecutando en modo standalone con metadata por defecto.")
    success = generate_pdd_docx_v0_3(
        json_path=JSON_INPUT_PATH,
        screenshot_dir=SCREENSHOT_DIR,
        output_docx_path=OUTPUT_DOCX_PATH,
        output_bpmn_path=OUTPUT_BPMN_PATH,
        user_metadata=user_meta
    )
    if success:
        print("\n--- Fase 3.3 (Standalone Test) Completada Exitosamente ---")
    else:
        print("\n--- Fase 3.3 (Standalone Test) Fallida o con Errores ---")

