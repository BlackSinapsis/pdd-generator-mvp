# -*- coding: utf-8 -*-
import json
import os
import sys
import cv2 # Necesario para leer dimensiones de imagen
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.enum.table import WD_ROW_HEIGHT_RULE # <<<--- **AÑADIDO: Importación necesaria**

# --- Configuración ---
JSON_INPUT_PATH = 'full_analysis_output.json'
SCREENSHOT_DIR = 'screenshots_output'
OUTPUT_DOCX_PATH = 'PDD_Generated_Output.docx'
OUTPUT_BPMN_PATH = 'Generated_Process.bpmn'
DEFAULT_USER_METADATA = {
    "project_name": "PDD Agent Process", "project_acronym": "PDDAGENT",
    "author_name": "AutoGenerated", "version": "0.2", "status": "DRAFT"
}
# --- Fin Configuración ---

# --- Funciones Auxiliares ---
def set_run_font(run, size_pt):
    font = run.font
    font.size = Pt(size_pt)

def add_metadata_section(document, user_metadata, ai_metadata):
    print("  - Añadiendo sección de metadata...")
    process_name = ai_metadata.get('process_name_suggestion') or user_metadata.get('project_name', 'Unknown Process')
    acronym = ai_metadata.get('potential_acronym') or user_metadata.get('project_acronym', '')
    acronym_str = f"({acronym})" if acronym else ""
    document.add_heading(f"Process Descriptions Document (PDD)", level=0)
    p_name = document.add_paragraph()
    p_name.add_run(f"{process_name} {acronym_str}").bold = True
    p_name.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    document.add_paragraph(f"Version {user_metadata.get('version', '<x.x>')} {user_metadata.get('status', 'DRAFT')}", style='Intense Quote')
    document.add_paragraph(f"Prepared by {user_metadata.get('author_name', '<Author>')}")
    document.add_paragraph()

def add_toc_placeholder(document):
    print("  - Añadiendo placeholder para Tabla de Contenidos...")
    document.add_heading("Table of Contents", level=1)
    document.add_paragraph("[Insert Table of Contents here. In MS Word: References -> Table of Contents -> Automatic Table]")
    document.add_page_break()

def add_narrative_section(document, title, level, text_from_ai, section_name_for_log):
    print(f"  - Añadiendo sección narrativa: {section_name_for_log}...")
    document.add_heading(title, level=level)
    p_note = document.add_paragraph()
    run_note = p_note.add_run("(Note: The following text was generated by AI based on video analysis and may require review and editing.)")
    set_run_font(run_note, 9)
    run_note.italic = True
    document.add_paragraph(text_from_ai or "[AI did not generate text for this section or it was missing in the JSON.]")
    document.add_paragraph()

def handle_bpmn_section(document, bpmn_xml_string, output_bpmn_path):
    print("  - Manejando sección BPMN...")
    document.add_heading("3.2 Process Flow Diagram (BPMN 2.0)", level=2)
    if bpmn_xml_string:
        try:
            with open(output_bpmn_path, 'w', encoding='utf-8') as f_bpmn:
                f_bpmn.write(bpmn_xml_string)
            print(f"    -> Archivo BPMN XML guardado en: '{output_bpmn_path}'")
            p = document.add_paragraph()
            p.add_run("Instructions:").bold = True
            p.add_run(f"\n1. Import the generated file ")
            run_fname = p.add_run(f"'{os.path.basename(output_bpmn_path)}'")
            run_fname.italic = True
            p.add_run(" into a BPMN modeling tool (e.g., bpmn.io online, draw.io, Camunda Modeler).")
            p.add_run("\n2. Review and edit the diagram for accuracy and completeness.")
            p.add_run("\n3. Export the final diagram as an image (PNG recommended).")
            p.add_run("\n4. Delete this instruction text and paste the exported image below.")
            document.add_paragraph("\n[ << PASTE BPMN DIAGRAM IMAGE HERE >> ]\n")
        except Exception as e:
            print(f"    Error al guardar BPMN XML en '{output_bpmn_path}': {e}")
            document.add_paragraph(f"[Error saving BPMN XML file: {e}. Check AI output or permissions.]")
    else:
        print("    Advertencia: No se encontró código BPMN XML en el JSON.")
        document.add_paragraph("[BPMN XML code was not found in the AI analysis output.]")
    document.add_paragraph()

# --- **FUNCIÓN MODIFICADA** ---
def add_detailed_steps_table(document, steps_list, screenshot_dir):
    print("  - Añadiendo tabla de pasos detallados...")
    document.add_heading("3.3 Detailed Process Steps", level=2)
    if not steps_list:
        document.add_paragraph("[No detailed steps found in the AI analysis output.]")
        return 0

    headers = ["Step ID", "Application", "Action", "Detailed Description", "Screenshot"]
    table = document.add_table(rows=1, cols=len(headers))
    table.style = 'Table Grid'
    table.autofit = False
    table.allow_autofit = True # <<<--- **AÑADIDO**

    # --- Rellenar Encabezados y establecer altura AUTO ---
    hdr_cells = table.rows[0].cells
    table.rows[0].height_rule = WD_ROW_HEIGHT_RULE.AUTO # <<<--- **AÑADIDO**
    table.rows[0].height = None                         # <<<--- **AÑADIDO**
    for i, header_text in enumerate(headers):
        cell_paragraph = hdr_cells[i].paragraphs[0]
        run = cell_paragraph.add_run(header_text)
        run.bold = True
        set_run_font(run, 10)
        cell_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        hdr_cells[i].vertical_alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    screenshots_found_count = 0
    target_width_inches = Inches(2.5)

    for step in steps_list:
        step_number = step.get("step_number", "N/A")
        application = step.get("application_in_focus", "N/A")
        action_summary = step.get("description", "N/A") # Para columna Action
        description_long = step.get("action_type_inferred", "N/A") # Para columna Detailed Description

        # Añadir fila y establecer altura AUTO
        new_row = table.add_row()
        new_row.height_rule = WD_ROW_HEIGHT_RULE.AUTO # <<<--- **AÑADIDO**
        new_row.height = None                         # <<<--- **AÑADIDO**
        row_cells = new_row.cells

        # Rellenar celdas de texto
        row_cells[0].text = str(step_number)
        row_cells[1].text = application
        row_cells[2].text = action_summary     # <-- Usar resumen
        row_cells[3].text = description_long   # <-- Usar detalle largo

        # Alinear texto
        for i in range(len(headers)-1):
             row_cells[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.LEFT
             row_cells[i].vertical_alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

        # Incrustar Screenshot
        screenshot_filename = f"screenshot_paso_{step_number}.png"
        screenshot_path = os.path.join(screenshot_dir, screenshot_filename)
        cell_paragraph = row_cells[4].paragraphs[0]
        cell_paragraph.clear()
        cell_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

        if os.path.exists(screenshot_path):
            try:
                img = cv2.imread(screenshot_path)
                if img is None:
                    raise ValueError("OpenCV could not read the image.")
                height_px, width_px, _ = img.shape
                aspect_ratio = float(height_px) / float(width_px)
                target_height_inches = target_width_inches * aspect_ratio

                run = cell_paragraph.add_run()
                # Usar ancho Y alto calculado
                run.add_picture(screenshot_path, width=target_width_inches, height=target_height_inches)
                screenshots_found_count += 1
            except Exception as e:
                 print(f"    Advertencia: No se pudo leer/insertar imagen '{screenshot_path}': {e}")
                 cell_paragraph.add_run("[Error reading/inserting image]")
        else:
            cell_paragraph.add_run("[Screenshot not found]")

    print(f"    -> Tabla creada con {len(steps_list)} pasos.")
    print(f"    -> Se encontraron e intentaron insertar {screenshots_found_count} screenshots.")
    document.add_paragraph()
    return screenshots_found_count
# --- **FIN FUNCIÓN MODIFICADA** ---

def add_exceptions_section(document, exceptions_list):
    print("  - Añadiendo sección de excepciones sugeridas...")
    # ... (código sin cambios) ...
    document.add_paragraph()

def add_placeholder_sections(document):
    print("  - Añadiendo placeholders para secciones finales...")
    # ... (código sin cambios) ...

# --- Función Principal de Generación ---
def generate_full_docx_pdd(complex_json_path: str, screenshot_dir: str, output_docx_path: str, output_bpmn_path: str, user_metadata: dict):
    print(f"--- Iniciando Fase 3.2: Ensamblaje de Documento DOCX Completo ---")
    # ... (Cargar JSON) ...
    try:
        with open(complex_json_path, 'r', encoding='utf-8') as f:
            full_data = json.load(f)
        print("Datos JSON cargados.")
    except Exception as e:
        print(f"Error Crítico: No se pudo cargar el archivo JSON '{complex_json_path}': {e}")
        return False

    # Extraer datos
    ai_metadata = full_data.get("pdd_metadata_inferred", {})
    intro_text = full_data.get("introduction_text", "")
    context_text = full_data.get("business_context_text", "")
    roles_list = full_data.get("user_roles_inferred", [])
    overview_text = full_data.get("process_overview_text", "")
    steps_list = full_data.get("detailed_steps", [])
    exceptions_list = full_data.get("potential_exceptions_suggestions", [])
    bpmn_code = full_data.get("bpmn_xml_code", "")

    # ... (Verificar Screenshot Dir) ...
    if not os.path.isdir(screenshot_dir):
        # ... (error) ...
        return False
    else:
        print("Directorio de screenshots OK.")

    # Crear y rellenar DOCX
    print("\n[Paso 3/4] Creando y rellenando documento DOCX...")
    try:
        document = Document()
        # --- Añadir Secciones ---
        add_metadata_section(document, user_metadata, ai_metadata)
        add_toc_placeholder(document)
        add_narrative_section(document, "1. Introduction", 1, intro_text, "Introduction")
        add_narrative_section(document, "2. Business Context", 1, context_text, "Business Context")
        add_narrative_section(document, "3. Process Description", 1, "Overview text below.", "Process Description Header")
        add_narrative_section(document, "3.1 Overview of the Process", 2, overview_text, "Overview")
        handle_bpmn_section(document, bpmn_code, output_bpmn_path)
        screenshots_inserted = add_detailed_steps_table(document, steps_list, screenshot_dir) # Llama a función modificada
        add_exceptions_section(document, exceptions_list)
        add_placeholder_sections(document)

        # Guardar DOCX
        print("\n[Paso 4/4] Guardando documento DOCX final...")
        document.save(output_docx_path)
        print(f"Documento DOCX guardado exitosamente en: '{output_docx_path}'")
        return True
    except Exception as e:
        print(f"Error Crítico inesperado durante la generación del DOCX: {e}")
        import traceback
        traceback.print_exc()
        return False

# --- Bloque de Ejecución Principal (para pruebas standalone) ---
if __name__ == "__main__":
    success = generate_full_docx_pdd(
        complex_json_path=JSON_INPUT_PATH,
        screenshot_dir=SCREENSHOT_DIR,
        output_docx_path=OUTPUT_DOCX_PATH,
        output_bpmn_path=OUTPUT_BPMN_PATH,
        user_metadata=DEFAULT_USER_METADATA
    )
    if success:
        print("\n--- Fase 3.2 (Standalone Test) Completada Exitosamente ---")
    else:
        print("\n--- Fase 3.2 (Standalone Test) Fallida o con Errores ---")